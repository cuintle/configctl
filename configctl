#! /usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

ZSH_CUSTOM="$HOME/.oh-my-zsh/custom"
CONFIGFILES_DIR="$HOME/.system_configuration"
CONFIG_VARS="$CONFIGFILES_DIR/vars/env.vars"

# shellcheck disable=SC1090
source "$CONFIG_VARS"

# shellcheck disable=SC1091
source "$CONFIGFILES_DIR"/zsh/.zprofile

function install_oh_my_zsh() {
    echo -------------------
    echo "Installing Oh My ZSH..."
    echo -------------------

    if [[ -d "$HOME/.oh-my-zsh" ]]; then
        rm -rf "$HOME/.oh-my-zsh"
    fi

    eval "$GET_FILE $OHMYZSH_URL" | sh -s -- >> "$LOG" 2>&1 && echo "Finished." || echo "ERROR"
}

function install_powerlevel10k() {
    echo -------------------
    echo "Installing Powerlevel10k..."
    echo -------------------
    if [[ ! -d "$ZSH_CUSTOM/themes/powerlevel10k" ]]; then
        git clone --depth=1 "$GH_URL/romkatv/powerlevel10k.git" "$ZSH_CUSTOM/themes/powerlevel10k" >> "$LOG" 2>&1 && echo "Finished." || echo "ERROR"
    fi
}

function install_poetry() {
    echo -------------------
    echo "Installing Poetry..."
    echo -------------------
    eval "$GET_FILE https://install.python-poetry.org" | python3 - >> "$LOG" 2>&1 && echo "Finished." || echo "ERROR: Installation error or Poetry is already installed."
    if [[ ! -d "$ZSH_CUSTOM/plugins/poetry" ]]; then
        mkdir -p "$ZSH_CUSTOM/plugins/poetry"
    fi
    
    poetry completions zsh > "$ZSH_CUSTOM/plugins/poetry/_poetry"
    
}

function install_pdm() {  
    echo -------------------
    echo "Installing PDM..."
    echo -------------------
    eval "$GET_FILE $PDM_URL" | python3 - >> "$LOG" 2>&1 && echo "Finished." || echo "ERROR: Installation error or PDM is already installed."
    if [[ ! -d "$ZSH_CUSTOM/plugins/pdm" ]]; then
        mkdir -p "$ZSH_CUSTOM/plugins/pdm"
    fi
    
    pdm completion zsh > "$ZSH_CUSTOM/plugins/pdm/_pdm"
}

function enable_flathub() {
    echo -------------------
    echo "Enabling Flathub..."
    echo -------------------
    eval "$FP_REMOTE_ADD flathub $FLATHUB_URL" >> "$LOG" 2>&1 && echo "Finished." || echo "ERROR"
}

function enable_gnome_nightly() {
    echo -------------------
    echo "Enabling Gnome Nightly..."
    echo -------------------
    eval "$FP_REMOTE_ADD gnome-nightly $FP_GNOME_URL" >> "$LOG" 2>&1 && echo "Finished." || echo "ERROR"
}

function download_gnome_extensions() {   
    echo -------------------
    echo "Downloading Gnome Extensions..."
    echo -------------------
    
    pushd "$GNOME_EXTENSION_DIR" || return 1
    
    eval "$GET_FILE $EXTENSION_URL/$TAKS_WIDGET"
    eval "$GET_FILE $EXTENSION_URL/$READING"
    eval "$GET_FILE $EXTENSION_URL/$PERFECTION"
    eval "$GET_FILE $EXTENSION_URL/$HIDE_TOPBAR"
    eval "$GET_FILE $EXTENSION_URL/$HOT_CORNERS"
    popd || return 1
}

function install_gnome_extensions() {    
    echo -------------------
    echo "Installing Gnome Extensions..."
    echo -------------------
    
    pushd "$GNOME_EXTENSION_DIR" || return 1
    
    eval "$EXT_INSTALL $TAKS_WIDGET"
    eval "$EXT_INSTALL $READING"
    eval "$EXT_INSTALL $PERFECTION"
    eval "$EXT_INSTALL $HIDE_TOPBAR"
    eval "$EXT_INSTALL $HOT_CORNERS"
    popd || return 1
}

function install_adw_gtk3_theme() {
    echo -------------------
    echo "Installing Adw-GTK3 Theme..."
    echo -------------------
    
    eval "$GET_FILE $GTK_THEME_URL" | tar -Jx -C "$HOME/.local/share/themes"  >> "$LOG" 2>&1 && echo "Finished." || echo "ERROR"
}

function install_distrobox() {
    echo -------------------
    echo "Installing Distrobox..."
    echo -------------------
    eval "$GET_FILE $DISTROBOX_URL" | sh -s -- --next --prefix ~/.local >> "$LOG" 2>&1 && echo "Finished." || echo "ERROR"
}


function install_gocryptfs() {
    GOCRYPTFS_BIN="$HOME/.local/bin/gocryptfs"
    XRAY_BIN="$HOME/.local/bin/gocryptfs-xray"
    
    echo -------------------
    echo "Installing GoCryptFS..."
    echo -------------------
    eval "$GET_FILE $GOCRYPTFS_URL" | tar -zx -C ~/.local/bin gocryptfs gocryptfs-xray >> "$LOG" 2>&1 && echo "Finished." || echo "ERROR"
    
    [[ -x "$GOCRYPTFS_BIN" ]] || chmod +x "$GOCRYPTFS_BIN"
    [[ -x "$XRAY_BIN" ]] || chmod +x "$XRAY_BIN"
    
    }

function install_age() {
    AGE_BIN="$HOME/.local/bin/age"
    KEYGEN_BIN="$HOME/.local/bin/age-keygen"
    
    echo -------------------
    echo "Installing Age..."
    echo -------------------
    eval "$GET_FILE $AGE_URL" | tar -zx -C ~/.cache; cp ~/.cache/age/* ~/.local/bin >> "$LOG" 2>&1 && echo "Finished." || echo "ERROR"
    [[ ! -x "$AGE_BIN" ]] || chmod +x "$AGE_BIN"
    [[ ! -x "$KEYGEN_BIN" ]] || chmod +x "$KEYGEN_BIN"

}

function install_yq() {
	eval "$GET_FILE https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 --output ~/.local/bin/yq" &&  chmod +x ~/.local/bin/yq >> "$LOG" 2>&1 && echo "Finished." || echo "ERROR"
}

function install_gh_cli() {
    GH_BIN="$HOME/.local/bin/gh"
    # GH_MAN="$HOME/.local/share/man/man1"

    echo -------------------
    echo "Installing Github Cli..."
    echo -------------------
    eval "$GET_FILE $GH_CLI_URL" | tar -zx -C ~/.cache; cp ~/.cache/gh_"$GH_VERSION"_linux_amd64/bin/* ~/.local/bin; cp ~/.cache/gh_"$GH_VERSION"_linux_amd64/share/man/man1/* ~/.local/share/man/man1 >> "$LOG" 2>&1 && echo "Finished." || echo "ERROR"
    [[ ! -x "$GH_BIN" ]] || chmod +x "$GH_BIN"

}

function install_glab_cli() {
    GLAB_BIN="$HOME/.local/bin/glab"

    echo -------------------
    echo "Installing Gitlab Cli..."
    echo -------------------
  
    eval "$GET_FILE $GLAB_CLI_URL" | tar -C ~/.cache -xzf -; install -m755 ~/.cache/bin/glab ~/.local/bin/glab >> "$LOG" 2>&1 && echo "Finished." || echo "ERROR"
    [[ ! -x "$GLAB_BIN" ]] || chmod +x "$GLAB_BIN"

}

function download_qbittorrent_plugins() {
    echo -------------------
    echo "Downloading QBittorrent plugins..."
    echo -------------------
    
    pushd "$QBITTORRENT_PLUGINS_DIR" || return 1
    eval "$GET_FILE $GH_RAW_URL/nbusseneau/qBittorrent-rutracker-plugin/master/rutracker.py"
    eval "$GET_FILE $GH_RAW_URL/imDMG/qBt_SE/master/engines/rutor.py"
    eval "$GET_FILE $GH_RAW_URL/LightDestory/qBittorrent-Search-Plugins/master/src/engines/rarbg.py"
    eval "$GET_FILE $GH_RAW_URL/LightDestory/qBittorrent-Search-Plugins/master/src/engines/ettv.py"
    eval "$GET_FILE $GH_RAW_URL/LightDestory/qBittorrent-Search-Plugins/master/src/engines/btetree.py"
    eval "$GET_FILE $GH_RAW_URL/iordic/qbittorrent-search-plugins/master/engines/elitetorrent.py"
    eval "$GET_FILE $GH_RAW_URL/kjjejones44/b4tg_search_plugin/master/bt4g.py"
    popd || return 1

}

function set_url_handler() {
    echo -------------------
    echo "Setting up URL Handler..."
    echo -------------------
    xdg-settings set default-url-scheme-handler http re.sonny.Junction.desktop >> "$LOG" 2>&1 && echo "Finished." || echo "ERROR"
    xdg-settings set default-url-scheme-handler https re.sonny.Junction.desktop >> "$LOG" 2>&1 && echo "Finished." || echo "ERROR"
}

function set_cisco_pttp_handler() {
    echo -------------------
    echo "Setting up CISCO PTTP Handler..."
    echo -------------------
    xdg-settings set default-url-scheme-handler pttp cisco-ptsa.desktop  >> "$LOG" 2>&1 && echo "Finished." || echo "ERROR"
}

function install_flatpak_runtimes() {
    CURRENT_FREE_PLAT=22.08
    SUPPORTED_FREE_PLAT=21.08
    CURRENT_KDE_PLAT=5.15-${CURRENT_FREE_PLAT}
    # shellcheck disable=SC2034
    SUPPORTED_KDE_PLAT=5.15-${SUPPORTED_FREE_PLAT}
    CURRENT_GNOME_PLAT=44
    SUPPORTED_GNOME_PLAT=43
    echo -------------------
    echo "Installing Flatpak runtimes..."
    echo -------------------
    
    flatpak install flathub com.github.Eloston.UngoogledChromium.Codecs \
    org.freedesktop.Platform/x86_64/${CURRENT_FREE_PLAT} \
    org.freedesktop.Platform/x86_64/${SUPPORTED_FREE_PLAT} \
    org.freedesktop.Platform.GL.default/x86_64/${CURRENT_FREE_PLAT} \
    org.freedesktop.Platform.GL.default/x86_64/${SUPPORTED_FREE_PLAT} \
    org.freedesktop.Platform.VAAPI.Intel/x86_64/${CURRENT_FREE_PLAT} \
    org.freedesktop.Platform.VAAPI.Intel/x86_64/${SUPPORTED_FREE_PLAT} \
    org.freedesktop.Platform.ffmpeg-full/x86_64/${SUPPORTED_FREE_PLAT} \
    org.freedesktop.Platform.openh264/x86_64/2.0 \
    org.gnome.Platform/x86_64/${CURRENT_GNOME_PLAT} \
    org.gnome.Platform/x86_64/${SUPPORTED_GNOME_PLAT} \
    org.gtk.Gtk3theme.Adwaita-dark \
    org.gtk.Gtk3theme.adw-gtk3 \
    org.gtk.Gtk3theme.adw-gtk3-dark \
    org.kde.Platform/x86_64/${CURRENT_KDE_PLAT} \
    org.kde.PlatformTheme.QGnomePlatform/x86_64/${CURRENT_KDE_PLAT} \
    org.kde.PlatformTheme.QtSNI/x86_64/${CURRENT_KDE_PLAT} \
    org.kde.WaylandDecoration.QGnomePlatform-decoration/x86_64/${CURRENT_KDE_PLAT} \
    org.telegram.desktop.webview  --user --assumeyes >> "$LOG" 2>&1 && echo "Finished." || echo "ERROR"
    
}

function install_flatpak_apps() {
    echo -------------------
    echo "Installing Flatpak apps..."
    echo -------------------
    
    flatpak install flathub app.drey.Dialect \
    app.drey.EarTag \
    ar.xjuan.Cambalache \
    com.bitstower.Markets \
    com.bitwarden.desktop \
    com.github.Eloston.UngoogledChromium \
    com.github.alainm23.planner \
    com.github.johnfactotum.Foliate \
    com.github.liferooter.textpieces \
    com.github.maoschanz.drawing \
    com.github.rafostar.Clapper \
    com.github.tchx84.Flatseal \
    com.mattjakeman.ExtensionManager \
    com.raggesilver.BlackBox \
    com.stremio.Stremio \
    fr.romainvigier.MetadataCleaner \
    io.freetubeapp.FreeTube \
    io.github.celluloid_player.Celluloid \
    io.github.mightycreak.Diffuse \
    io.github.mpobaschnig.Vaults \
    io.github.seadve.Kooha \
    io.gitlab.librewolf-community \
    io.posidon.Paper \
    nl.hjdskes.gcolor3 \
    org.gnome.Calculator \
    org.gnome.Calendar \
    org.gnome.Evince \
    org.gnome.FileRoller \
    org.gnome.Geary \
    org.gnome.Lollypop \
    org.gnome.TextEditor \
    org.gnome.Todo \
    org.gnome.Weather \
    org.gnome.clocks \
    org.gnome.design.Contrast \
    org.gnome.design.IconLibrary \
    org.gnome.dspy org.gnome.eog \
    org.gnome.gitg \
    org.gnome.gitlab.somas.Apostrophe \
    org.gnome.meld \
    org.keepassxc.KeePassXC \
    org.qbittorrent.qBittorrent \
    org.telegram.desktop \
    re.sonny.Junction --user --assumeyes >> "$LOG" 2>&1 && echo "Finished." || echo "ERROR"
    
}

function install_vscode() {
    echo -------------------
    echo "Installing VSCode..."
    echo -------------------
    
    distrobox create --image "$IMAGE_VSCODIUM_BASE"  --name code --home "$DISTROBOX_HOMES/Code" --yes >> "$LOG" 2>&1 && echo "Finished." || echo "ERROR"
}

function install_vscodium() {
    echo -------------------
    echo "Installing VSCodium..."
    echo -------------------
    
    distrobox create --image "$IMAGE_VSCODIUM_BASE" --name codium --home "$DISTROBOX_HOMES/Codium" --yes >> "$LOG" 2>&1 && echo "Finished." || echo "ERROR"
}

function extract_gocryptfs_encrypted_files() {
    echo -------------------
    echo "Extracting encrypted files..."
    echo -------------------
    
    ENCRYPTED_FILE="$ENCRYPTED_DIR/encrypted.tar.zst"
    
    if [[ ! -d "$DECRYPTED_DATA_DIR" ]]; then
        mkdir -p "$ENCRYPTED_DATA_DIR"
        mkdir -p "$DECRYPTED_DATA_DIR"
    fi
    if [[ ! "$(ls -A "$DECRYPTED_DATA_DIR")" ]]; then
        tar -I 'zstd' -xf "$ENCRYPTED_FILE" -C "$ENCRYPTED_DATA_DIR" >> "$LOG" 2>&1 && echo "Finished." || echo "ERROR"
    fi
}

function backup_gocryptfs_encrypted_files() {
    echo -------------------
    echo "Backing up encrypted files..."
    echo -------------------
    
    pushd "$ENCRYPTED_DATA_DIR" || return 1
    tar -I 'zstd --ultra -22' -cf "$ENCRYPTED_FILE" . 
    popd || return 1
}

function decrypt_gocryptfs_files() {
    echo -------------------
    echo "Decrypting files..."
    echo -------------------
    
    PASSFILE="$SECRET_FILES/passfile"
    DECRYPT_ERROR=""
    
    if [[ ! -f "$PASSFILE" ]]; then
        zenity --title "Decrypt config files" --password --width 200 --height 50 > "$PASSFILE"
    fi
    if "$HOME"/.local/bin/gocryptfs -passfile "$PASSFILE" "$ENCRYPTED_DATA_DIR" "$DECRYPTED_DATA_DIR" >> "$LOG" 2>&1; then echo "Your files was successfully decrypted."; else DECRYPT_ERROR="ERROR"; fi
        
    if [[ -n "$DECRYPT_ERROR" ]]; then
        rm "$PASSFILE"
        if [[ "$(ls -A "$DECRYPTED_DATA_DIR")" ]]; then
            fusermount3 -u "$DECRYPTED_DATA_DIR"
        fi
    fi
}