#! /usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

ZSH_CUSTOM="$HOME/.oh-my-zsh/custom"
CONFIGFILES_DIR="$HOME/.system_configuration"
CONFIG_VARS="$CONFIGFILES_DIR/vars/env.vars"

# shellcheck disable=SC1090
source "$CONFIG_VARS"

# shellcheck disable=SC1091
source "$CONFIGFILES_DIR"/zsh/.zprofile

function install_oh_my_zsh() {
    echo -------------------
    echo "Installing Oh My ZSH..."
    echo -------------------

    if [[ -d "$HOME/.oh-my-zsh" ]]; then
        rm -rf "$HOME/.oh-my-zsh"
    fi

    eval "$GET_FILE $OHMYZSH_URL" | sh -s -- >> "$LOG" 2>&1 && echo "Finished." || echo "ERROR"
}

function install_powerlevel10k() {
    echo -------------------
    echo "Installing Powerlevel10k..."
    echo -------------------
    if [[ ! -d "$ZSH_CUSTOM/themes/powerlevel10k" ]]; then
        git clone --depth=1 "$GH_URL/romkatv/powerlevel10k.git" "$ZSH_CUSTOM/themes/powerlevel10k" >> "$LOG" 2>&1 && echo "Finished." || echo "ERROR"
    fi
}

function install_poetry() {
    echo -------------------
    echo "Installing Poetry..."
    echo -------------------
    eval "$GET_FILE https://install.python-poetry.org" | python3 - >> "$LOG" 2>&1 && echo "Finished." || echo "ERROR: Installation error or Poetry is already installed."
    if [[ ! -d "$ZSH_CUSTOM/plugins/poetry" ]]; then
        mkdir -p "$ZSH_CUSTOM/plugins/poetry"
    fi
    
    poetry completions zsh > "$ZSH_CUSTOM/plugins/poetry/_poetry"
    
}

function install_pdm() {  
    echo -------------------
    echo "Installing PDM..."
    echo -------------------
    eval "$GET_FILE $PDM_URL" | python3 - >> "$LOG" 2>&1 && echo "Finished." || echo "ERROR: Installation error or PDM is already installed."
    if [[ ! -d "$ZSH_CUSTOM/plugins/pdm" ]]; then
        mkdir -p "$ZSH_CUSTOM/plugins/pdm"
    fi
    
    pdm completion zsh > "$ZSH_CUSTOM/plugins/pdm/_pdm"
}

function enable_flathub() {
    echo -------------------
    echo "Enabling Flathub..."
    echo -------------------
    eval "$FP_REMOTE_ADD flathub $FLATHUB_URL" >> "$LOG" 2>&1 && echo "Finished." || echo "ERROR"
}

function enable_gnome_nightly() {
    echo -------------------
    echo "Enabling Gnome Nightly..."
    echo -------------------
    eval "$FP_REMOTE_ADD gnome-nightly $FP_GNOME_URL" >> "$LOG" 2>&1 && echo "Finished." || echo "ERROR"
}

function download_gnome_extensions() {   
    echo -------------------
    echo "Downloading Gnome Extensions..."
    echo -------------------
    
    pushd "$GNOME_EXTENSION_DIR" || return 1
    
    eval "$GET_FILE $EXTENSION_URL/$TAKS_WIDGET"
    eval "$GET_FILE $EXTENSION_URL/$READING"
    eval "$GET_FILE $EXTENSION_URL/$PERFECTION"
    eval "$GET_FILE $EXTENSION_URL/$HIDE_TOPBAR"
    eval "$GET_FILE $EXTENSION_URL/$HOT_CORNERS"
    popd || return 1
}

function install_gnome_extensions() {    
    echo -------------------
    echo "Installing Gnome Extensions..."
    echo -------------------
    
    pushd "$GNOME_EXTENSION_DIR" || return 1
    
    eval "$EXT_INSTALL $TAKS_WIDGET"
    eval "$EXT_INSTALL $READING"
    eval "$EXT_INSTALL $PERFECTION"
    eval "$EXT_INSTALL $HIDE_TOPBAR"
    eval "$EXT_INSTALL $HOT_CORNERS"
    popd || return 1
}

function install_distrobox() {
    echo -------------------
    echo "Installing Distrobox..."
    echo -------------------
    eval "$GET_FILE $DISTROBOX_URL" | sh -s -- --next --prefix ~/.local >> "$LOG" 2>&1 && echo "Finished." || echo "ERROR"
}


function install_gocryptfs() {
    GOCRYPTFS_BIN="$HOME/.local/bin/gocryptfs"
    XRAY_BIN="$HOME/.local/bin/gocryptfs-xray"
    
    echo -------------------
    echo "Installing GoCryptFS..."
    echo -------------------
    eval "$GET_FILE $GOCRYPTFS_URL" | tar -zx -C ~/.local/bin gocryptfs gocryptfs-xray >> "$LOG" 2>&1 && echo "Finished." || echo "ERROR"
    
    [[ -x "$GOCRYPTFS_BIN" ]] || chmod +x "$GOCRYPTFS_BIN"
    [[ -x "$XRAY_BIN" ]] || chmod +x "$XRAY_BIN"
    
    }

function install_age() {
    AGE_BIN="$HOME/.local/bin/age"
    KEYGEN_BIN="$HOME/.local/bin/age-keygen"
    
    echo -------------------
    echo "Installing Age..."
    echo -------------------
    eval "$GET_FILE $AGE_URL" | tar -zx -C ~/.cache; cp ~/.cache/age/* ~/.local/bin >> "$LOG" 2>&1 && echo "Finished." || echo "ERROR"
    [[ ! -x "$AGE_BIN" ]] || chmod +x "$AGE_BIN"
    [[ ! -x "$KEYGEN_BIN" ]] || chmod +x "$KEYGEN_BIN"

}
